using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace Chummer.Backend
{
    class OptionsManager
    {
        private const string PROGRAM_SETTINGS_FILE = "programdata.local.xml";
        private List<CharacterOptions> fileOptions;
        private CharacterOptions _default;

        public static OptionsManager Load()
        {
            //todo: load globaloptions from somewhere (registry or file (LATER))
            ClassSaver saver = new ClassSaver();

            List<CharacterOptions> loadedFiles = new List<CharacterOptions>();

            foreach (string file in Directory.EnumerateFiles(Path.Combine(Application.StartupPath, "settings")))
            {
                string filename = Path.GetFileName(file);
                if (filename == PROGRAM_SETTINGS_FILE) continue;

                CharacterOptions o = new CharacterOptions(filename);
                XmlDocument document = new XmlDocument();
                document.Load(file);

                if (document.DocumentElement.Name != "settings")
                {
                    Log.Error($"Option file without <settings>? {file}");
                    continue;
                }

                if(Version.Parse(document.DocumentElement.Attributes["fileversion"]?.Value ?? "0") <= new Version(0,190))
                {
                    //Old settings files tries to keep stuff in categories for ?reasons? but new autogenerated just dumps
                    //everything in the node it gets assigned. Move a few things to root node so it can be read

                    MoveToRoot(document, "karmacost");
                    MoveToRoot(document, "defaultbuild");
                    MoveToRoot(document, "bpcost");
                }

                saver.Load(ref o, document.DocumentElement);

                foreach (string book in o.Books.Keys.ToList())
                {
                    o.Books[book] = false;
                }
                foreach (XmlNode node in document.DocumentElement["books"].ChildNodes)
                {
                    o.Books[node.InnerText] = true;
                }


                loadedFiles.Add(o);
            }

            if(loadedFiles.Count == 0)
                loadedFiles.Add(new CharacterOptions("default.xml"));


            return new OptionsManager {fileOptions = loadedFiles};
        }

        private static void MoveToRoot(XmlDocument document, string child)
        {
            XmlNode n = document.DocumentElement[child];
            document.DocumentElement.RemoveChild(n);
            while (n.HasChildNodes)
            {
                document.DocumentElement.AppendChild(n.FirstChild);
            }
        }


        public CharacterOptions Default => _default ?? (_default = fileOptions[0]); //TODO:Add and read from globaloptions


        public IEnumerable<CharacterOptions> LoadedOptions()
        {
            foreach (CharacterOptions characterOptionse in fileOptions)
            {
                yield return characterOptionse;
            }
            
        }
    }
}
